{# *** [START] set _listen_options *** #}
{% set _listen_options = '' %}
{% if item.listen_options|default(false) %}
{% set _listen_options = ' ' + item.listen_options %}
{% endif -%}

{% set _ipv6_listen_options = 'default ipv6only=on' %}
{% if item.ipv6_listen_options|default(false) %}
{% set _ipv6_listen_options = ' ' + item.ipv6_listen_options %}
{% endif -%}
{# *** [END] set _listen_options *** -#}

{# *** [START] set _ssl and _spdy *** #}
{% set _ssl_listen_option = '' %}
{% if item.ssl_listen_options|default(false) %}
{% set _ssl_listen_option = ' ssl' %}
{% endif -%}

{% set _spdy_listen_option = '' %}
{% if item.spdy|default(false) %}
{% set _spdy_listen_option = ' spdy' %}
{% endif -%}
{# *** [END] set _ssl and _spdy *** -#}

{# WARNING: This file needs refactoring to address scope.function_template lines -#}

{% if item.rewrite_www_to_non_www|default(false) %}
server {
{# Note: the value of item.listen_ip should be a list or a string #}
{% if item.listen_ip|default('*') is not string and item.listen_ip is iterable -%}
{% for ip in item.listen_ip %}
  listen  {{ ip }}:{{ item.ssl_port }}{{ _ssl_listen_option }}{{ _spdy_listen_option }}{{ _listen_options }};
{% endfor %}
{% else %}
  listen  {{ item.listen_ip|default('*') }}:{{ item.ssl_port }}{{ _ssl_listen_option }}{{ _spdy_listen_option }}{{ _listen_options }};
{% endif %}

{# check to see if ipv6 support exists in the kernel before applying #}
{% if item.ipv6_enable|default(false) and (ansible_default_ipv6.address is defined) -%}
{# Note: the value of item.ipv6_listen_ip should be a list or a string #}
{% if item.ipv6_listen_ip|default('::') is not string and item.ipv6_listen_ip is iterable -%}
{% for ipv6 in item.ipv6_listen_ip %}
  listen  [{{ ipv6 }}]:{{ item.ssl_port }} ssl{{ _spdy_listen_option }}{{ _ipv6_listen_options }};
{% endfor %}
{% else %}
  listen  [{{ item.ipv6_listen_ip|default('::') }}]:{{ item.ssl_port }} ssl{{ _spdy_listen_option }}{{ _ipv6_listen_options }};
{% endif %}
{% endif %}
{% if item.server_name|default(false) %}
  server_name  www.{{ item.server_name[0]|regex_replace('^www.', '') }};
{% endif %}
  return       301 https://{{ item.server_name[0]|regex_replace('^www.', '') }}$request_uri;

{% include 'vhost_ssl_settings.j2' %}

}

{% endif %}

server {
{# Note: the value of item.listen_ip should be a list or a string #}
{% if item.listen_ip|default('*') is not string and item.listen_ip is iterable -%}
{% for ip in item.listen_ip %}
  listen  {{ ip }}:{{ item.ssl_port }}{{ _ssl_listen_option }}{{ _spdy_listen_option }}{{ _listen_options }};
{% endfor %}
{% else %}
  listen  {{ item.listen_ip|default('*') }}:{{ item.ssl_port }}{{ _ssl_listen_option }}{{ _spdy_listen_option }}{{ _listen_options }};
{% endif -%}

{# check to see if ipv6 support exists in the kernel before applying #}
{% if item.ipv6_enable|default(false) and (ansible_default_ipv6.address is defined) -%}
{# Note: the value of item.ipv6_listen_ip should be a list or a string #}
{% if item.ipv6_listen_ip|default('::') is not string and item.ipv6_listen_ip is iterable -%}
{% for ipv6 in item.ipv6_listen_ip %}
  listen  [{{ ipv6 }}]:{{ item.ssl_port }} ssl{{ _spdy_listen_option }}{{ _ipv6_listen_options }};
{% endfor %}
{% else %}
  listen  [{{ item.ipv6_listen_ip|default('::') }}]:{{ item.ssl_port }} ssl{{ _spdy_listen_option }}{{ _ipv6_listen_options }};
{% endif %}
{% endif -%}

{# *** [START] set _server_name *** #}
{% set _server_name = item.server_name|default([item.vhost])|join(" ") %}
{% if item.rewrite_www_to_non_www|default(false) %}
{% set _server_name = _server_name[0]|regex_replace('^www.', '') %};
{% endif -%}
{# *** [END] set _server_name *** #}

  server_name  {{ _server_name }};

{% include 'vhost_ssl_settings.j2' %}

{% if item.maintenance|default(false) %}
  {{ item.maintenance_value }};
{% endif -%}

{% if item.resolver|default([])|count > 0 %}
  resolver             {{ item.resolver|join(' ') }};
{% endif -%}

{% if item.auth_basic|default(false) %}
  auth_basic           "{{ item.auth_basic }}";
{% endif -%}
{% if item.auth_basic_user_file|default(false) %}
  auth_basic_user_file      {{ item.auth_basic_user_file }};
{% endif -%}

{% if item.client_body_timeout|default(false) %}
  client_body_timeout {{ item.client_body_timeout }};
{% endif -%}
{% if item.client_header_timeout|default(false) %}
  client_header_timeout {{ item.client_header_timeout }};
{% endif -%}
{% if item.client_max_body_size|default(false) %}
  client_max_body_size {{ item.client_max_body_size }};
{% endif %}

{% if item.gzip_types|default(false) %}
  gzip_types {{ item.gzip_types }};
{% endif -%}

{% if item.index_files|default(false) %}
  index    {{ item.index_files|join(' ') }};
{% elif item.index_files is defined and item.index_files|count == 0 %}
{# index_files is empty so do nothing #}
{% else %}
  index    {{ nginx_index_files|join(' ') }};
{% endif -%}

{# *** [START] set _access_log and _error_log *** #}
{% set _ssl_access_log  = nginx_log_dir + '/ssl-' + item.vhost + '.access.log' %}
{% if item.access_log is defined and item.access_log != 'off' %}
{% set _ssl_access_log  = nginx_log_dir + '/ssl-' + item.access_log %}
{% elif item.access_log is defined and item.access_log == 'off' %}
{% set _ssl_access_log  = 'off' %}
{% endif -%}

{% set _ssl_error_log   = nginx_log_dir + '/ssl-' + item.vhost + '.error.log' %}
{% if item.error_log is defined and item.error_log %}
{% set _ssl_error_log   = nginx_log_dir + '/ssl-' + item.error_log %}
{% endif %}
{# *** [END] set _access_log and _error_log *** #}

  access_log            {{ _ssl_access_log }} {{ item.format_log|default('combined') }};
  error_log             {{ _ssl_error_log }};

{% if item.vhost_cfg_prepend|default(false) %}
{% for key,value in item.vhost_cfg_prepend|dictsort %}
{# NOTE: value may only be a string or a list #}
{% if value is not string and value is iterable%}
{% for asubvalue in value %}
  {{ key }} {{ asubvalue }};
{% endfor %}
{% else %}
  {{ key }} {{ value }};
{% endif %}
{% endfor %}
{% endif -%}

{% if item.vhost_cfg_ssl_prepend|default(false) %}
{% for key,value in item.vhost_cfg_ssl_prepend|dictsort %}
{# NOTE: value may only be a string or a list #}
{% if value is not string and value is iterable%}
{% for asubvalue in value %}
  {{ key }} {{ asubvalue }};
{% endfor %}
{% else %}
  {{ key }} {{ value }};
{% endif %}
{% endfor %}
{% endif -%}

{% if item.raw_prepend|default(false) and item.raw_prepend is iterable %}
{% for line in item.raw_prepend %}
  {{ line }}
{% endfor %}
{% endif %}

{% if item.www_root|default(false) -%}
  root {{ item.www_root }};
{% endif -%}

{% if item.passenger_cgi_param|default(false) %}
{% for key,value in item.passenger_cgi_param|dictsort %}
  passenger_set_cgi_param  {{ key }} {{ value }};
{% endfor %}
{% endif %}
{% if item.passenger_set_header|default(false) %}
{% for key,value in item.passenger_set_header|dictsort %}
  passenger_set_header  {{ key }} {{ value }};
{% endfor %}
{% endif -%}
{% if item.passenger_env_var|default(false) %}
{% for key,value in item.passenger_env_var|dictsort %}
  passenger_env_var  {{ key }} {{ value }};
{% endfor %}
{% endif -%}

{% if item.add_header|default(false) %}
{% for key,value in item.add_header|dictsort %}
  add_header              {{ key }} {{ value }};
{% endfor %}
{% endif %}
